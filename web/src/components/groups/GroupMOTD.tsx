import React, { useState } from 'react'; import { MessageSquare, Edit, Save, X } from 'lucide-react'; import { GroupInfo, moderationApi } from '@/lib/api'; interface GroupMOTDProps { group: GroupInfo; userRole: string; onUpdate?: () => void; }const GroupMOTD: React.FC<GroupMOTDProps> = ({ group, userRole, onUpdate }) => { const [motd, setMOTD] = useState(group.motd || ''); const [isEditing, setIsEditing] = useState(false); const [editText, setEditText] = useState(''); const [saving, setSaving] = useState(false); const canManage = userRole === 'OWNER' || userRole === 'ADMIN'; const maxLength = 300; const startEdit = () => { setIsEditing(true); setEditText(motd); }; const cancelEdit = () => { setIsEditing(false); setEditText(''); }; const handleSave = async () => { setSaving(true); try { await moderationApi.updateGroupMOTD(group.groupId, editText.trim()); setMOTD(editText.trim()); setIsEditing(false); setEditText(''); onUpdate?.(); } catch (error) { console.error('Failed to update MOTD:', error); } finally { setSaving(false); } }; if (!canManage && !motd) { return null; } return (<div className="bg-stone-900 border border-stone-700 rounded-lg p-6">      <div className="flex items-center justify-between mb-6">        <div className="flex items-center gap-3">          <div className="w-10 h-10 bg-yellow-600 rounded-lg flex items-center justify-center">            <MessageSquare className="w-5 h-5 text-black" />          </div>          <div>            <h3 className="font-minecraftia text-lg text-neutral-100">              Message of the Day            </h3>            <p className="text-sm text-neutral-400">              Welcome message for group members            </p>          </div>        </div>        {canManage && !isEditing && (<button onClick={startEdit} className="p-2 text-neutral-400 hover:text-yellow-400 transition-colors"          >            <Edit className="w-5 h-5" />          </button>)}      </div>      <div>        {isEditing ? (<div className="space-y-4">            <div>              <label className="block text-sm font-medium text-neutral-300 mb-2">                Welcome Message ({editText.length}/{maxLength})              </label>              <textarea value={editText} onChange={(e) => setEditText(e.target.value.slice(0, maxLength))} className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-neutral-200 placeholder-neutral-400 focus:outline-none focus:border-yellow-600 resize-none" rows={4} placeholder="Enter a welcome message for new and existing members..." />            </div>            <div className="flex justify-end gap-2">              <button onClick={cancelEdit} disabled={saving} className="px-3 py-2 text-neutral-400 hover:text-neutral-200 transition-colors disabled:opacity-50"              >                <X className="w-4 h-4" />              </button>              <button onClick={handleSave} disabled={saving} className="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 disabled:bg-neutral-600 text-black font-medium rounded-lg transition-colors flex items-center gap-2"              >                {saving ? (<div className="w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin"></div>) : (<Save className="w-4 h-4" />)}                Save              </button>            </div>          </div>) : (<div>            {motd ? (<div className="bg-gradient-to-r from-yellow-600/20 to-orange-600/20 border border-yellow-600/30 rounded-lg p-4">                <p className="text-neutral-200 leading-relaxed whitespace-pre-wrap">                  {motd}                </p>              </div>) : (<div className="text-center py-8">                <MessageSquare className="w-12 h-12 text-neutral-600 mx-auto mb-3" />                <p className="text-neutral-400">No welcome message set</p>                {canManage && (<p className="text-sm text-neutral-500 mt-1">                    Add a message to welcome new members                  </p>)}              </div>)}          </div>)}      </div>    </div>); }; export default GroupMOTD;